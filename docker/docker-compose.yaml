services:
  # The postgres database.
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      PGUSER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-clinx12345690}
      POSTGRES_DB: ${POSTGRES_DB:-clinx}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    command: >
      postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-100}'
               -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}'
               -c 'work_mem=${POSTGRES_WORK_MEM:-4MB}'
               -c 'maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}'
               -c 'effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB}'
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: [ 'CMD', 'pg_isready' ]
      interval: 1s
      timeout: 3s
      retries: 30
  mysql:
    image: mysql:8.0.41
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-clinx}
    command:
      --slow-query-log=1
      --long-query-time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/config:/etc/mysql/conf.d
      - ./initdb:/docker-entrypoint-initdb.d
    ports:
      - 3307:3306
    env_file:
      - .env
  # The redis cache.
  redis:
    image: redis:6-alpine
    restart: always
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD:-clinx12345690}
    volumes:
      # Mount the redis data directory to the container.
      - ./volumes/redis/data:/data
    ports:
      - 6379:6379
    # Set the redis password when startup redis server.
    command: redis-server --requirepass ${REDIS_PASSWORD:-clinx12345690}
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]

  # The nginx reverse proxy.
  # used for reverse proxying the API service and Web service.
  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./nginx/https.conf.template:/etc/nginx/https.conf.template
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/docker-entrypoint-clinx.sh:/docker-entrypoint-mount.sh
      - ./nginx/ssl:/etc/ssl # cert dir (legacy)
      - ./volumes/certbot/conf/live:/etc/letsencrypt/live # cert dir (with certbot container)
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/html
    entrypoint: [ 'sh', '-c', "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_}
      NGINX_HTTPS_ENABLED: ${NGINX_HTTPS_ENABLED:-false}
      NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}v
      NGINX_PORT: ${NGINX_PORT:-80}
      # You're required to add your own SSL certificates/keys to the `./nginx/ssl` directory
      # and modify the env vars below in .env if HTTPS_ENABLED is true.
      NGINX_SSL_CERT_FILENAME: ${NGINX_SSL_CERT_FILENAME:-dify.crt}
      NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME:-dify.key}
      NGINX_SSL_PROTOCOLS: ${NGINX_SSL_PROTOCOLS:-TLSv1.1 TLSv1.2 TLSv1.3}
      NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES:-auto}
      NGINX_CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE:-15M}
      NGINX_KEEPALIVE_TIMEOUT: ${NGINX_KEEPALIVE_TIMEOUT:-65}
      NGINX_PROXY_READ_TIMEOUT: ${NGINX_PROXY_READ_TIMEOUT:-3600s}
      NGINX_PROXY_SEND_TIMEOUT: ${NGINX_PROXY_SEND_TIMEOUT:-3600s}
      NGINX_ENABLE_CERTBOT_CHALLENGE: ${NGINX_ENABLE_CERTBOT_CHALLENGE:-false}
      CERTBOT_DOMAIN: ${CERTBOT_DOMAIN:-}
#    depends_on:
#      - api
#      - web
    ports:
      - '${EXPOSE_NGINX_PORT:-80}:${NGINX_PORT:-80}'
      - '${EXPOSE_NGINX_SSL_PORT:-443}:${NGINX_SSL_PORT:-443}'

  # The clinx server
  clinx:
    image: skynono/clinx:latest
    restart: always
    depends_on:
      - mysql
      - redis
    env_file:
      - .env
    volumes:
      - ./volumes/clinx/data:/data

  # gptweb
  gptweb:
    container_name: chatgpt-web-midjourney-proxy
    image: ydlhero/chatgpt-web-midjourney-proxy # 总是使用latest,更新时重新pull该tag镜像即可
    environment:
      TZ: Asia/Shanghai # 指定时区
      # 必选
      OPENAI_API_KEY:
      # API接口地址，可选，设置 OPENAI_API_KEY 时可用
      OPENAI_API_BASE_URL: https://dev.clinx.work
      # API模型，可选，设置 OPENAI_API_KEY 时可用
      OPENAI_API_MODEL: gpt-4.1
      # 访问权限密钥，可选
      AUTH_SECRET_KEY:
      # midjourney 服务器地址，可选 可用下面的 http://midjourney-proxy:8080
      MJ_SERVER:
      # midjourney API密钥，可选
      MJ_API_SECRET:
      #API_UPLOADER 是否可以上传 1 可以其他都不可以，可选
      API_UPLOADER:
      #HIDE_SERVER 隐藏服务端 1，可选
      HIDE_SERVER:
      #自定义模型  CUSTOM_MODELS=-gpt-3.5-turbo-0301,gpt-4.5 不显示 gpt-3.5-turbo-0301 新增加 gpt-4.5，可选
      CUSTOM_MODELS:
      #TJ_BAIDU_ID 百度统计ID，可选
      TJ_BAIDU_ID:
      #TJ_GOOGLE_ID 谷歌统计ID，可选
      TJ_GOOGLE_ID:
      #SYS_NOTIFY 系统通知 支持HTML ，可选
      SYS_NOTIFY:
      #FILE_SERVER 文件服务器，可选 可以用下面的 http://fileserver:3012
      FILE_SERVER:
      #DISABLE_GPT4=1 前端限制GPT4调用，可选
      DISABLE_GPT4:
      # cloudflare r2 存储 10 GB/月 免费 https://www.cloudflare.com/zh-cn/developer-platform/r2/
      R2_DOMAIN:
      R2_BUCKET_NAME:
      R2_ACCOUNT_ID:
      R2_KEY_ID:
      R2_KEY_SECRET:
      ## UPLOAD_IMG_SIZE gpt-4-version 图片上传大小 单位是兆 注意别带单位 最好别超过10
      UPLOAD_IMG_SIZE: 1
      # GPT_URL=/gpts.json  自定义GPTs模型
      GPT_URL:
      # SYS_THEME 主题 theme   light 或者 dark
      SYS_THEME: dark
      #关闭MD预览  CLOSE_MD_PREVIEW=1
      CLOSE_MD_PREVIEW:
      #爆破：验证次数 注意: vercel 不支持 nginx 请设置  proxy_set_header   X-Forwarded-For  $remote_addr;
      AUTH_SECRET_ERROR_COUNT: 3
      #爆破：验证停留时间 单位分钟 注意: vercel 不支持
      AUTH_SECRET_ERROR_TIME: 10

  midjourney-proxy:
    image: novicezk/midjourney-proxy:2.6.3
    restart: always
    ports:
      - 8380:8080
    volumes:
      - ./midjourney-proxy:/home/spring/config